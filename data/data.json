{
  "protocols": [{
    "name": "asteria",
    "scope": "txpipe",
    "description": "A Cardano bot challenge game where ships compete to reach the center of a 2D grid to collect rewards",
    "repository_url": "https://github.com/txpipe/asteria",
    "protocol_path": "asteria.tx3",
    "published_date": 1727787600,
    "readme": "# Asteria\n\nA Cardano bot challenge to showcase the capabilities of the eUTxO model.\n\n## Mechanics\n\nIn this bot challenge you compete by moving a ship (your bot) through a 2D grid. The ship that reaches the center is allowed to collect the rewards.\n\nShips are implemented as UTxOs with a datum holding a pair of (x, y) coordinates that represent their position in the 2D grid. To move a ship, a transaction must consume the UTxO and create a new one with holding the new position.\n\n![grid](https:\/\/github.com\/txpipe\/asteria\/assets\/653886\/d5d35b42-b554-4eaa-a798-84fe7b0b9787)\n\nMovement of the ships is constrained by a _Space-Time_ on-chain script that limits their velocity. Strictly speaking, the max distance that a ship can move in any given transaction has a constant upper bound. Distances are defined using [Manhattan distance] to simplify the math.\n\n![move tx](https:\/\/github.com\/txpipe\/asteria\/assets\/653886\/ddcbc786-8947-4c0a-b0bc-4cd7de1bcd0f)\n\nMovement of the ships is also constrained by a _fuel_ token that is required for any change in position. An specifc amount of _fuel_ is required per distance unit. The lack of the required fuel amount will block the movement of the ship.\n\n![gather tx](https:\/\/github.com\/txpipe\/asteria\/assets\/653886\/5c3af5bc-5aad-4598-b35e-90e0729e82df)\n\nTo accumulate fuel, ships must _gather_ these tokens which are distributed randomly across the same grid. To gather a fuel token, your ship needs to be in the same coordinates as the fuel.\n\nTo create a ship, a participant must mint the corresponding NFT from the valid policy id. A minimum amount of ADA will be requried for the mint. This ADA used to mint the ships will be increment the rewards locked for the winner. The initial position of the ship is decided by the player but is contrainted to the external boundary of the grid.\n\nA unique UTxO will be place at the center of the grid to hold the rewards for the winner of the challenge. To claim rewards, a ship must be located at the center of the grid. Each claim is allowed to collect 1\/2 of the total rewards.\n\n## Backstory\n\n\/\/ TODO\n\n## Getting started\n\n\/\/ TODO\n\n## Monitoring progress\n\nWe have a basic visual 2D map that allows you to show the position of all the ships and fuel in real-time (updated at each block). We encourage developers to create their own visualizers, we'll showcase any project in the homepage of the challenge."
  },{
    "name": "transfer",
    "scope": "example",
    "description": "Simple ADA transfer protocol with automatic change handling and fee management",
    "protocol_path": "transfer.tx3",
    "published_date": 1727787600,
    "readme": "# Transfer Protocol\n\nA simple ADA transfer protocol that enables sending a specified quantity of ADA from a sender to a receiver. The protocol automatically handles change calculation, returning the remaining balance (minus transaction fees) back to the sender.\n\n## Features\n\n- **Simple transfers**: Transfer any amount of ADA between two parties\n- **Automatic change handling**: Remaining balance is automatically returned to sender\n- **Fee management**: Transaction fees are automatically deducted from the sender's change\n- **Minimum balance validation**: Ensures sender has sufficient funds before transfer\n\n## Usage\n\nThe protocol requires:\n- `quantity`: The amount of ADA to transfer (in lovelace)\n- `Sender`: The party sending the ADA\n- `Receiver`: The party receiving the ADA\n\nThis is an ideal example protocol for understanding basic TX3 transaction structure and UTxO management."
  },{
    "name": "faucet",
    "scope": "example",
    "description": "Token faucet protocol that mints custom tokens using password authentication",
    "protocol_path": "faucet.tx3",
    "published_date": 1727787600,
    "readme": "# Faucet Protocol\n\nA token faucet protocol that enables users to claim custom tokens (MyToken) using password-based authentication. This protocol demonstrates basic token minting mechanics in the TX3 ecosystem.\n\n## Features\n\n- **Password-protected minting**: Secure token distribution using password verification\n- **Custom token support**: Mints MyToken assets with configurable quantities\n- **Gas fee handling**: Automatically manages transaction fees from user input\n- **Policy-based validation**: Uses PasswordPolicy for secure token minting\n\n## How It Works\n\n1. **Claim Process**: Users provide a password and specify the token quantity to claim\n2. **Validation**: The protocol validates the password against the PasswordPolicy\n3. **Minting**: New MyToken assets are minted and sent to the requester\n4. **Fee Management**: Transaction fees are deducted from the provided gas input\n\n## Parameters\n\n- `password`: Bytes - Authentication password for token claiming\n- `quantity`: Int - Amount of MyToken to mint and claim\n\n## Use Cases\n\n- **Development Testing**: Distribute test tokens for dApp development\n- **Community Rewards**: Controlled token distribution with access control\n- **Educational Examples**: Learn about token minting and policy validation\n\nThis protocol serves as an excellent introduction to TX3 minting mechanisms and policy-based access control."
  },{
    "name": "swap",
    "scope": "example",
    "description": "Decentralized exchange protocol with automated market maker functionality",
    "protocol_path": "swap.tx3",
    "published_date": 1727787600,
    "readme": "# Token Swap Protocol\n\nA decentralized exchange (DEX) protocol implementing automated market maker (AMM) functionality for token swapping. This protocol enables users to exchange different assets through liquidity pools managed by the DEX.\n\n## Features\n\n- **Automated Market Making**: Dynamic pricing based on pool state and asset ratios\n- **Pool State Management**: Maintains liquidity pool data with pair balances\n- **Asset Flexibility**: Supports swapping any asset types (AnyAsset)\n- **Fee Integration**: Automatic transaction fee handling\n- **Change Management**: Returns excess payment to buyers\n\n## How It Works\n\n1. **Pool Setup**: DEX maintains liquidity pools with two assets (pair_a, pair_b)\n2. **Swap Request**: Buyer specifies what they want (ask) and what they're offering (bid)\n3. **Pool Update**: Pool balances are adjusted based on the swap amounts\n4. **Asset Exchange**: Buyer receives the requested asset, pool gets the bid asset\n5. **Change Return**: Any excess payment is returned to the buyer\n\n## Transaction Structure\n\n- **Inputs**: Pool UTxO from DEX, payment from Buyer\n- **Outputs**: Updated pool state, assets to buyer\n- **Redeemer**: SwapParams containing ask and bid values\n\n## Parameters\n\n- `ask`: AnyAsset - The asset and amount the buyer wants to receive\n- `bid`: AnyAsset - The asset and amount the buyer is offering\n\n## Use Cases\n\n- **Token Trading**: Exchange different cryptocurrencies or tokens\n- **Liquidity Provision**: Enable trading pairs for various assets\n- **DeFi Integration**: Foundation for more complex financial protocols\n- **Educational Examples**: Learn AMM mechanics and pool management\n\nThis protocol demonstrates core DEX functionality and serves as a building block for decentralized trading systems."
  },{
    "name": "vesting",
    "scope": "example",
    "description": "Time-locked token vesting protocol with beneficiary management",
    "protocol_path": "vesting.tx3",
    "published_date": 1727787600,
    "readme": "# Token Vesting Protocol\n\nA comprehensive time-locked vesting protocol that enables owners to lock tokens for beneficiaries until specified unlock times. This protocol uses Cardano's TimeLock policy to enforce vesting schedules and provides secure token distribution mechanisms.\n\n## Features\n\n- **Time-locked Security**: Uses TimeLock policy to enforce vesting schedules\n- **Beneficiary Management**: Supports designated beneficiaries for token releases\n- **Dual Transaction Model**: Separate lock and unlock operations\n- **Owner Control**: Original owners maintain control over locking process\n- **Automatic Validation**: Built-in time validation for unlock attempts\n\n## How It Works\n\n### Locking Process (`lock` transaction)\n1. **Token Deposit**: Owner specifies quantity and unlock time\n2. **State Creation**: Creates a State datum with lock details\n3. **TimeLock Escrow**: Tokens are locked in TimeLock script address\n4. **Change Return**: Remaining balance returned to owner\n\n### Unlocking Process (`unlock` transaction)\n1. **Time Validation**: Checks if current time >= lock_until\n2. **Beneficiary Verification**: Validates beneficiary authorization\n3. **Token Release**: Transfers locked tokens to beneficiary\n4. **State Cleanup**: Consumes the locking UTxO\n\n## State Structure\n\n```\nState {\n  lock_until: Int     // Unix timestamp for unlock time\n  owner: Bytes        // Original token owner\n  beneficiary: Bytes  // Designated beneficiary\n}\n```\n\n## Parameters\n\n### Lock Transaction\n- `quantity`: Int - Amount of ADA to lock (in lovelace)\n- `until`: Int - Unix timestamp when tokens can be unlocked\n\n### Unlock Transaction\n- `locked_utxo`: UtxoRef - Reference to the locked UTxO\n\n## Use Cases\n\n- **Employee Compensation**: Vesting schedules for team token allocation\n- **Investment Agreements**: Time-locked investor token releases\n- **Milestone Payments**: Project-based token distribution\n- **Trust Funds**: Beneficiary-based inheritance mechanisms\n- **Educational Examples**: Learn time-lock mechanics and policy usage\n\nThis protocol demonstrates advanced UTxO management, time-based constraints, and multi-party token custody patterns in the TX3 ecosystem."
  },{
    "name": "buidlr_fest",
    "scope": "example",
    "description": "Event ticketing protocol for developer conferences with DRep integration",
    "protocol_path": "buidlr_fest.tx3",
    "published_date": 1727787600,
    "readme": "# Buidlr Fest Event Protocol\n\nA specialized event ticketing protocol designed for developer conferences and blockchain events. This protocol combines ticket purchasing with Cardano's delegation system, allowing participants to purchase tickets while simultaneously participating in governance through DRep delegation.\n\n## Features\n\n- **Event Ticketing**: Simple ADA-based ticket purchasing mechanism\n- **DRep Integration**: Automatic delegation certificate creation during ticket purchase\n- **Governance Participation**: Combines event participation with blockchain governance\n- **Change Management**: Automatic return of excess payment to participants\n- **Organizer Payments**: Direct payment flow to event organizers\n\n## How It Works\n\n1. **Ticket Purchase**: Participant specifies DRep and ticket price\n2. **Payment Processing**: ADA payment is transferred to event organizer\n3. **Delegation Setup**: Vote delegation certificate is created for the specified DRep\n4. **Change Return**: Any excess funds are returned to the participant\n5. **Governance Activation**: Participant's stake is delegated to their chosen DRep\n\n## Transaction Components\n\n- **Input**: Participant's UTxO with sufficient ADA for ticket price + fees\n- **Outputs**: Payment to organizer, change back to participant\n- **Certificate**: Vote delegation certificate linking participant to DRep\n\n## Parameters\n\n- `drep`: Bytes - The DRep (Delegated Representative) identifier for governance delegation\n- `ticket_price`: Int - The cost of the event ticket in ADA (lovelace)\n\n## Use Cases\n\n- **Developer Conferences**: Blockchain and Web3 developer events\n- **Governance Events**: Workshops and seminars focused on Cardano governance\n- **Community Meetups**: Local blockchain community gatherings\n- **Educational Workshops**: Training sessions with governance participation incentives\n- **Hackathons**: Events where participants engage with governance while competing\n\n## Benefits\n\n- **Dual Purpose**: Combines event participation with governance engagement\n- **Simplified Process**: One transaction handles both ticket purchase and delegation\n- **Community Building**: Encourages active participation in Cardano governance\n- **Educational Value**: Introduces event participants to delegation concepts\n\nThis protocol demonstrates how blockchain events can seamlessly integrate with governance mechanisms, encouraging broader participation in decentralized decision-making processes."
  },{
    "name": "disordered",
    "scope": "example",
    "description": "Example protocol demonstrating transaction ordering and UTxO management patterns",
    "protocol_path": "disordered.tx3",
    "published_date": 1727787600,
    "readme": "# Disordered Protocol\n\nAn educational example protocol that demonstrates transaction ordering flexibility and UTxO management patterns in the TX3 language. This protocol showcases how transaction components can be declared in different orders while maintaining logical correctness.\n\n## Key Features\n\n- **Flexible Declaration Order**: Demonstrates that inputs, outputs, and references can be declared in any order\n- **Party Declaration Flexibility**: Shows parties can be declared after their usage in transactions\n- **UTxO Reference Patterns**: Includes reference inputs for advanced transaction patterns\n- **Basic Transfer Logic**: Simple ADA transfer with change management\n\n## Educational Value\n\n### Transaction Structure Flexibility\nThe protocol intentionally declares transaction components in a non-traditional order:\n1. **Output first**: Receiver output declared before input\n2. **Input second**: Source input declared after output\n3. **Change output**: Sender change calculated and returned\n4. **Reference input**: Demonstrates reference UTxO usage\n5. **Late party declaration**: Receiver party declared after transaction\n\n## Transaction Flow\n\n1. **Setup**: Sender initiates transaction with specified quantity\n2. **Reference**: Protocol references a specific UTxO for validation\n3. **Transfer**: ADA moves from Sender to Receiver\n4. **Change**: Remaining balance returned to Sender after fees\n\n## Parameters\n\n- `quantity`: Int - Amount of ADA to transfer (in lovelace)\n\n## Use Cases\n\n- **TX3 Learning**: Understanding transaction component ordering flexibility\n- **Code Organization**: Learning different ways to structure TX3 protocols\n- **Reference Patterns**: Exploring reference input usage\n- **Development Training**: Teaching protocol structure best practices\n\n## Technical Notes\n\n- **Reference UTxO**: Uses a zero hash reference for demonstration\n- **Party Scoping**: Shows that party declarations have file-level scope\n- **Order Independence**: Proves TX3 parser handles component order flexibility\n\nThis protocol is essential for understanding TX3's flexible syntax and serves as a foundation for more complex transaction patterns."
  },{
    "name": "jpg",
    "scope": "example",
    "description": "NFT protocol for handling image-based non-fungible token transactions",
    "protocol_path": "jpg.tx3",
    "published_date": 1727787600,
    "readme": "# JPG NFT Protocol\n\nA comprehensive NFT marketplace protocol designed for trading image-based non-fungible tokens. This protocol implements advanced features for NFT listings, offers, and sales with support for complex payout structures and marketplace operations.\n\n## Features\n\n- **NFT Marketplace**: Complete trading infrastructure for image-based NFTs\n- **Listing Management**: Create, update, and cancel NFT listings\n- **Offer System**: Support for buyer offers on listed NFTs\n- **Complex Payouts**: Multiple payout destinations for sales proceeds\n- **Validator Security**: Uses ListingValidator and OfferValidator for secure transactions\n- **Token Mapping**: Advanced token representation with key-value mappings\n\n## Protocol Components\n\n### Core Types\n- **Listing**: Contains payout information and owner details\n- **ListingPayout**: Defines payment distribution to multiple addresses\n- **Token**: Represents NFT tokens with type and amount mappings\n- **Buy/CancelOrUpdate**: Redeemer actions for listing operations\n\n### Validator Policies\n- **ListingValidator**: Ensures secure listing operations\n- **OfferValidator**: Manages offer creation and acceptance\n\n## Transaction Types\n\n1. **Create Listing**: List an NFT for sale with specified payouts\n2. **Buy NFT**: Purchase a listed NFT with automatic payout distribution\n3. **Make Offer**: Submit an offer for a listed NFT\n4. **Cancel/Update**: Modify or remove existing listings\n\n## Use Cases\n\n- **Digital Art Marketplace**: Trading platform for digital artwork NFTs\n- **Photography Sales**: Specialized marketplace for photographic NFTs\n- **Collectibles Trading**: Exchange rare and unique digital collectibles\n- **Multi-Party Sales**: Support for complex revenue sharing arrangements\n- **Creator Royalties**: Automatic royalty payments to original creators\n\n## Advanced Features\n\n- **Batch Operations**: Handle multiple NFT transactions efficiently\n- **Flexible Payouts**: Support for percentage-based or fixed-amount distributions\n- **Metadata Integration**: Rich metadata support for image-based tokens\n- **Security Validation**: Multi-layer validation for secure marketplace operations\n\nThis protocol demonstrates sophisticated NFT marketplace mechanics and serves as a foundation for building decentralized art and collectibles trading platforms."
  },{
    "name": "lang_tour",
    "scope": "example",
    "description": "Comprehensive tutorial showcasing TX3 programming language features",
    "protocol_path": "lang_tour.tx3",
    "published_date": 1727787600,
    "readme": "# TX3 Language Tour\n\nA comprehensive tutorial protocol that showcases the full spectrum of TX3 programming language features through practical examples. This protocol serves as a guided tour through TX3's type system, data structures, and transaction modeling capabilities.\n\n## Features\n\n- **Rich Type System**: Demonstrates record types, variant types, and complex data structures\n- **Asset Management**: Shows both static and dynamic asset definitions\n- **Policy Integration**: Examples of hash-based and fully-defined policies\n- **Transaction Modeling**: Complete transaction structure with inputs, outputs, and metadata\n- **Data Manipulation**: Field spreading, list operations, and datum transformations\n\n## Language Elements Demonstrated\n\n### Type Definitions\n- **MyRecord**: Complex record type with multiple field types (Int, Bytes, List<Int>)\n- **MyVariant**: Union type with multiple cases and optional fields\n- **OutputReference**: Nested type structures for blockchain references\n\n### Asset and Policy Examples\n- **OnlyHashPolicy**: Simple hash-based policy definition\n- **StaticAsset**: Fixed asset with predefined policy and token name\n- **FullyDefinedPolicy**: Complete policy with hash, script, and reference\n- **AnyAsset**: Dynamic asset creation with runtime parameters\n\n### Transaction Features\n- **Input Validation**: Datum type checking and minimum amount requirements\n- **Redeemer Usage**: Complex redeemer structures with field references\n- **Asset Minting**: Both static and dynamic token minting examples\n- **Output Construction**: Field spreading and datum transformation\n- **Validity Windows**: Time-based transaction validity constraints\n- **Metadata Integration**: Custom metadata attachment\n\n## Educational Progression\n\n1. **Basic Types**: Start with simple record and variant definitions\n2. **Asset Concepts**: Learn asset and policy declaration patterns\n3. **Transaction Structure**: Understand input/output/mint relationships\n4. **Data Flow**: Follow how data transforms through the transaction\n5. **Advanced Features**: Explore field spreading and complex expressions\n\n## Parameters\n\n- `quantity`: Int - Demonstrates numeric parameters and field references\n- `validUntil`: Int - Shows time-based validity constraints\n- `metadata`: Bytes - Illustrates metadata handling\n\n## Use Cases\n\n- **Learning TX3**: Step-by-step introduction to language features\n- **Reference Implementation**: Template for common TX3 patterns\n- **Development Training**: Hands-on examples for protocol developers\n- **Feature Testing**: Comprehensive coverage of language capabilities\n- **Documentation**: Living examples of TX3 syntax and semantics\n\n## Technical Highlights\n\n- **Field Spreading**: `...source` syntax for datum field inheritance\n- **Cross-Reference**: Using input fields in output calculations\n- **Type Safety**: Compile-time validation of datum types and asset amounts\n- **Redeemer Patterns**: Complex redeemer construction with variant types\n\nThis protocol is essential for anyone learning TX3, providing a comprehensive overview of the language's capabilities through practical, working examples."
  },{
    "name": "levvy_simple",
    "scope": "example",
    "description": "Simplified financial protocol for basic smart contract operations",
    "protocol_path": "levvy.simple.tx3",
    "published_date": 1727787600,
    "readme": "# Levvy Simple Protocol\n\nA simplified version of the Levvy lending protocol designed for basic peer-to-peer lending operations on Cardano. This protocol demonstrates fundamental concepts of collateralized lending without the complexity of the full Levvy system.\n\n## Features\n\n- **Peer-to-Peer Lending**: Direct lending between lenders and borrowers\n- **Collateral Management**: Token-based collateral for loan security\n- **Interest Calculation**: Simple interest mechanisms for loan profitability\n- **Time-based Loans**: Duration-limited lending with repayment deadlines\n- **Multi-Action Support**: Borrow, repay, claim, and foreclosure operations\n\n## Core Components\n\n### Parties\n- **Lender**: Provides ADA loans against token collateral\n- **Borrower**: Offers tokens as collateral for ADA loans\n- **Treasury**: System treasury for protocol fees and management\n\n### Data Types\n- **LendTokenDetails**: Lender's loan offering with terms and collateral requirements\n- **BorrowTokenDetails**: Active loan state with borrower and timing information\n- **RepayTokenDetails**: Repayment transaction details and calculations\n- **TokenAction**: Action types for different loan operations\n\n## Protocol Flow\n\n### Lending Process\n1. **Loan Offer**: Lender creates a loan offer specifying terms\n2. **Collateral Deposit**: Borrower deposits tokens as collateral\n3. **Loan Disbursement**: ADA loan amount is transferred to borrower\n\n### Repayment Process\n1. **Repayment**: Borrower repays principal plus interest\n2. **Collateral Release**: Tokens are returned to borrower\n3. **Interest Payment**: Lender receives loan principal plus interest\n\n### Default Handling\n1. **Foreclosure**: If loan isn't repaid by deadline\n2. **Collateral Seizure**: Lender can claim the collateral tokens\n\n## Transaction Types\n\n- **BorrowTokenAction**: Initialize a new loan with collateral\n- **RepayTokenAction**: Repay an existing loan and reclaim collateral\n- **ClaimTokenAction**: Lender claims repaid loan proceeds\n- **ForecloseTokenAction**: Handle defaulted loans\n- **CancelTokenAction**: Cancel unused loan offers\n\n## Key Features\n\n- **Simplified Structure**: Easier to understand than full Levvy protocol\n- **Educational Value**: Clear demonstration of lending mechanics\n- **Token Validator**: Uses script-based validation for security\n- **Reference Implementation**: Foundation for more complex lending protocols\n\n## Use Cases\n\n- **Learning DeFi**: Understand basic lending protocol mechanics\n- **Prototype Development**: Foundation for lending dApp development\n- **Educational Examples**: Teaching collateralized lending concepts\n- **Simple Lending**: Basic peer-to-peer lending without complex features\n\n## Technical Implementation\n\n- **TokenValidator**: Script-based validation for loan operations\n- **OutputReference**: Blockchain reference tracking for loan state\n- **Interest Calculation**: Simple percentage-based interest computation\n- **Time Management**: Duration tracking for loan terms\n\nThis simplified protocol provides a clear introduction to decentralized lending concepts and serves as a stepping stone to understanding more complex financial protocols in the TX3 ecosystem."
  },{
    "name": "levvy",
    "scope": "example",
    "description": "Comprehensive financial protocol for advanced DeFi operations and lending",
    "protocol_path": "levvy.tx3",
    "published_date": 1727787600,
    "readme": "# Levvy Protocol\n\nA comprehensive decentralized finance (DeFi) lending protocol that enables sophisticated peer-to-peer lending operations with advanced features like collateral management, interest calculations, and multi-party loan structures on Cardano.\n\n## Features\n\n- **Advanced Lending**: Full-featured P2P lending with complex loan structures\n- **Collateral Management**: Multi-asset collateral support with risk assessment\n- **Interest Mechanisms**: Sophisticated interest calculation and compounding\n- **Loan Lifecycle**: Complete loan management from origination to settlement\n- **Risk Management**: Built-in foreclosure and liquidation mechanisms\n- **Type Safety**: Advanced type system with aliases and asset classes\n\n## Core Architecture\n\n### Parties\n- **Lender**: Capital providers offering loans\n- **Borrower**: Users seeking loans against collateral\n- **Treasury**: Protocol treasury for fees and governance\n- **TokenValidator**: Script validator for loan operations\n\n### Advanced Type System\n- **Type Aliases**: PolicyId, AssetName, Lovelace, PosixTime for clarity\n- **AssetClass**: Standard asset representation with policy and name\n- **PlutusAddress**: Enhanced address types for script interactions\n- **OutputReference**: Blockchain UTxO reference tracking\n\n## Data Structures\n\n### Loan Details Types\n- **LendTokenDetails**: Comprehensive lender offer specifications\n- **BorrowTokenDetails**: Active loan state with all parties and timing\n- **RepayTokenDetails**: Repayment calculations and settlement details\n\n### Action and Datum Types\n- **TokenAction**: Enum for all possible loan operations\n- **PaymentDatum**: Payment tracking with UTxO references\n- **TokenDatum**: Union type for different loan states\n\n## Protocol Operations\n\n### Loan Origination\n1. **Lender Offer**: Create loan terms with collateral requirements\n2. **Borrower Request**: Match borrower needs with lender offers\n3. **Collateral Lock**: Secure borrower assets in escrow\n4. **Loan Disbursement**: Transfer principal to borrower\n\n### Loan Management\n1. **Interest Tracking**: Continuous interest calculation and accrual\n2. **Payment Processing**: Handle partial and full repayments\n3. **Collateral Monitoring**: Track collateral value and ratios\n4. **Risk Assessment**: Monitor loan health and default risk\n\n### Loan Resolution\n1. **Repayment**: Full loan repayment with interest\n2. **Foreclosure**: Handle defaulted loans and collateral seizure\n3. **Liquidation**: Convert collateral to cover outstanding debt\n4. **Settlement**: Final distribution of proceeds to all parties\n\n## Advanced Features\n\n### Script Integration\n- **Reference Scripts**: Efficient script UTxO management\n- **Validator Policies**: Complex validation logic for loan operations\n- **Multi-signature Support**: Enhanced security through multi-party validation\n\n### Financial Calculations\n- **Interest Compounding**: Sophisticated interest calculation methods\n- **Risk Metrics**: Loan-to-value ratios and collateral assessments\n- **Fee Structures**: Dynamic fee calculation based on loan parameters\n\n## Transaction Types\n\n- **BorrowTokenAction**: Initiate new loans with collateral\n- **RepayTokenAction**: Make loan payments (partial or full)\n- **ClaimTokenAction**: Lender claims loan proceeds\n- **ForecloseTokenAction**: Handle loan defaults and collateral seizure\n- **CancelTokenAction**: Cancel unfulfilled loan offers\n\n## Use Cases\n\n- **Institutional Lending**: Large-scale lending operations\n- **DeFi Integration**: Foundation for complex financial products\n- **Yield Generation**: Lenders earn interest on capital\n- **Liquidity Solutions**: Borrowers access capital without selling assets\n- **Risk Management**: Advanced tools for loan portfolio management\n\n## Technical Innovations\n\n- **Type Safety**: Comprehensive type system prevents common errors\n- **Scalability**: Designed for high-volume lending operations\n- **Composability**: Integration with other DeFi protocols\n- **Governance**: Built-in mechanisms for protocol upgrades\n\n## Educational Value\n\n- **DeFi Architecture**: Learn advanced decentralized finance concepts\n- **Smart Contract Design**: Study complex multi-party protocols\n- **Risk Management**: Understand collateral and liquidation mechanisms\n- **Type System Usage**: Master advanced TX3 type features\n\nThis protocol represents a production-ready lending system that demonstrates the full capabilities of TX3 for building sophisticated financial applications on Cardano."
  },{
    "name": "order_book",
    "scope": "example",
    "description": "Decentralized order book for trading with limit and market order support",
    "protocol_path": "order-book.tx3",
    "published_date": 1727787600,
    "readme": "# Order Book Protocol\n\nA comprehensive decentralized order book implementation that enables sophisticated trading operations with support for limit orders, market orders, and advanced order matching mechanisms. This protocol demonstrates how to build traditional exchange functionality on Cardano's UTxO model.\n\n## Features\n\n- **Complete Order Book**: Full buy/sell order management system\n- **Multiple Order Types**: Support for limit orders, market orders, and conditional orders\n- **Order Matching**: Automated matching engine for compatible orders\n- **Price Discovery**: Market-driven price discovery through order book depth\n- **Partial Fills**: Support for partial order execution and remaining order management\n- **Order Management**: Create, cancel, and modify existing orders\n\n## Core Components\n\n### Trading Parties\n- **Buyer**: Parties placing buy orders for assets\n- **Seller**: Parties placing sell orders for assets\n- **Exchange**: Protocol facilitator managing order book state\n- **Matcher**: Automated system for order matching and execution\n\n### Order Types\n- **Limit Orders**: Orders with specified price limits\n- **Market Orders**: Orders executed at current market price\n- **Stop Orders**: Conditional orders triggered by price movements\n- **Fill-or-Kill**: Orders that must be completely filled or cancelled\n\n## Order Book Mechanics\n\n### Order Placement\n1. **Order Creation**: Traders specify asset, quantity, price, and order type\n2. **Collateral Lock**: Required assets are locked in the order UTxO\n3. **Book Integration**: Orders are added to the appropriate side of the book\n4. **Matching Check**: New orders are immediately checked for matches\n\n### Order Matching\n1. **Price Priority**: Orders matched by best price first\n2. **Time Priority**: Same-price orders matched by timestamp\n3. **Quantity Matching**: Determine fill quantities for matching orders\n4. **Execution**: Execute trades and update order states\n\n### Order Management\n1. **Order Modification**: Update price or quantity of existing orders\n2. **Order Cancellation**: Remove orders and unlock collateral\n3. **Partial Fills**: Handle partially executed orders\n4. **Order Expiration**: Time-based order expiration mechanisms\n\n## Trading Operations\n\n### Buy Side Operations\n- **Place Buy Order**: Create new buy order with price and quantity\n- **Modify Buy Order**: Update existing buy order parameters\n- **Cancel Buy Order**: Remove buy order and return collateral\n- **Execute Buy**: Complete purchase when matched with sell order\n\n### Sell Side Operations\n- **Place Sell Order**: Create new sell order with asking price\n- **Modify Sell Order**: Update existing sell order parameters\n- **Cancel Sell Order**: Remove sell order and return assets\n- **Execute Sale**: Complete sale when matched with buy order\n\n## Advanced Features\n\n### Market Data\n- **Order Book Depth**: Real-time view of buy/sell order quantities at each price level\n- **Trade History**: Record of completed transactions and prices\n- **Volume Tracking**: Trading volume statistics and trends\n- **Spread Monitoring**: Bid-ask spread analysis and optimization\n\n### Risk Management\n- **Collateral Requirements**: Ensure traders have sufficient assets\n- **Position Limits**: Prevent excessive concentration in single assets\n- **Circuit Breakers**: Halt trading during extreme price movements\n- **Settlement Guarantees**: Ensure trade settlement through locked collateral\n\n## Transaction Structure\n\n### Order Placement Transaction\n- **Inputs**: Trader's UTxO with collateral assets\n- **Outputs**: Order UTxO with locked assets, change back to trader\n- **Redeemer**: Order details (price, quantity, type, expiration)\n\n### Trade Execution Transaction\n- **Inputs**: Matching buy and sell order UTxOs\n- **Outputs**: Asset transfers to both parties, updated/cancelled orders\n- **Redeemer**: Trade execution details and settlement information\n\n## Use Cases\n\n- **Decentralized Exchanges**: Core infrastructure for DEX trading\n- **Asset Trading**: Peer-to-peer trading of native Cardano assets\n- **Price Discovery**: Market-driven asset valuation\n- **Liquidity Provision**: Enable efficient asset exchange\n- **Institutional Trading**: Professional trading with advanced order types\n\n## Technical Implementation\n\n- **UTxO Management**: Efficient order representation as UTxOs\n- **Batching Support**: Handle multiple orders in single transactions\n- **Gas Optimization**: Minimize transaction costs for order operations\n- **Scalability**: Design for high-frequency trading environments\n\n## Educational Value\n\n- **Market Microstructure**: Learn how order books function in decentralized systems\n- **UTxO Trading**: Understand UTxO model advantages for trading applications\n- **Protocol Design**: Study complex multi-party protocol architecture\n- **Financial Engineering**: Explore advanced trading mechanism design\n\nThis protocol demonstrates how traditional centralized exchange functionality can be recreated in a decentralized, trustless environment using Cardano's UTxO model and TX3's expressive transaction language."
  },{
    "name": "plutus_addresses",
    "scope": "example",
    "description": "Example protocol demonstrating Plutus script addresses and smart contract interactions",
    "protocol_path": "plutus_addresses.tx3",
    "published_date": 1727787600,
    "readme": "# Plutus Addresses Protocol\n\nAn educational protocol that demonstrates the construction and usage of Plutus script addresses within the Cardano ecosystem. This protocol serves as a comprehensive guide to understanding address types, credential systems, and smart contract interactions in TX3.\n\n## Features\n\n- **Address Type System**: Complete implementation of Cardano's address structure\n- **Credential Management**: Payment and stake credential handling\n- **Script Integration**: Smart contract address construction and validation\n- **Generic Types**: Flexible type system with parameterized types\n- **Hash Functions**: Cryptographic hash operations for address generation\n- **Function Definitions**: Utility functions for address manipulation\n\n## Core Concepts\n\n### Address Architecture\nCardano addresses consist of two main components:\n- **Payment Credential**: Controls spending of UTxOs at the address\n- **Stake Credential**: Controls delegation and rewards (optional)\n\n### Credential Types\n- **Verification Key**: Traditional public key-based credentials\n- **Script**: Smart contract-based credentials for programmable addresses\n\n## Type System Components\n\n### Basic Types\n- **VerificationKey**: Raw public key material (Bytes)\n- **VerificationKeyHash**: Hashed public key using Blake2b_224\n- **Script**: Smart contract code (Bytes)\n- **ScriptHash**: Hashed script using Blake2b_224\n\n### Composite Types\n- **Credential**: Union type supporting both keys and scripts\n- **PaymentCredential**: Specialized credential for payment authorization\n- **StakeCredential**: Referenced credential for staking operations\n\n### Advanced Types\n- **Referenced<T>**: Generic type for inline or pointer-based references\n- **Pointer**: On-chain reference to certificate by slot, transaction, and index\n- **Address**: Complete address structure with payment and optional stake credentials\n\n## Address Construction\n\n### Function: `to_plutus_address`\nConverts a TX3 Party to a complete Plutus Address:\n\n1. **Stake Credential Processing**:\n   - Check if party has stake delegation\n   - Handle both script and verification key delegation\n   - Create Referenced credential with Inline wrapping\n\n2. **Payment Credential Processing**:\n   - Determine if payment is script-based or key-based\n   - Extract appropriate credential material\n   - Construct proper PaymentCredential\n\n3. **Address Assembly**:\n   - Combine payment and stake credentials\n   - Return complete Address structure\n\n## Technical Features\n\n### Generic Type System\n- **Referenced<Any>**: Parameterized type for flexible referencing\n- **Type Safety**: Compile-time validation of credential types\n- **Extensibility**: Easy addition of new credential types\n\n### Cryptographic Operations\n- **Blake2b_224**: Standard hash function for Cardano addresses\n- **Hash<Algorithm, Data>**: Generic hash type with algorithm specification\n- **Deterministic**: Reproducible address generation\n\n### Smart Contract Integration\n- **Script Addresses**: Addresses controlled by smart contract logic\n- **Multi-sig Support**: Multiple credential validation schemes\n- **Programmable Logic**: Custom spending and delegation rules\n\n## Use Cases\n\n### Development and Testing\n- **Address Generation**: Create addresses for testing and development\n- **Credential Management**: Understand key and script credential systems\n- **Protocol Integration**: Learn address handling for protocol development\n\n### Educational Applications\n- **Cardano Architecture**: Understand Cardano's address system design\n- **Cryptographic Concepts**: Learn hash functions and credential systems\n- **Type System Design**: Study advanced type system usage in TX3\n\n### Protocol Development\n- **Address Validation**: Verify address construction in other protocols\n- **Multi-party Systems**: Handle complex address requirements\n- **Security Patterns**: Implement secure address-based access control\n\n## Implementation Highlights\n\n### Conditional Logic\n- **Null Checking**: Safe handling of optional stake credentials\n- **Type Discrimination**: Distinguish between script and key credentials\n- **Pattern Matching**: Clean handling of union types\n\n### Memory Efficiency\n- **Inline References**: Efficient credential storage\n- **Pointer Support**: Alternative reference mechanism for space optimization\n- **Hash Optimization**: Minimal storage for credential identification\n\n## Educational Value\n\nThis protocol is essential for understanding:\n- **Cardano Address System**: Complete address construction mechanics\n- **Type System Design**: Advanced generic types and parameterization\n- **Cryptographic Integration**: Hash functions and credential security\n- **Function Definition**: TX3 function syntax and implementation patterns\n\n## Integration Patterns\n\n- **Protocol Composition**: Use address functions in other protocols\n- **Validation Logic**: Integrate address validation in smart contracts\n- **User Interfaces**: Generate addresses for wallet and dApp interfaces\n- **Testing Frameworks**: Create test addresses for protocol validation\n\nThis protocol serves as both a practical utility for address handling and an educational resource for understanding Cardano's sophisticated address system within the TX3 ecosystem."
  },{
    "name": "splash",
    "scope": "example",
    "description": "Demonstration protocol showcasing various TX3 language features and patterns",
    "protocol_path": "splash.tx3",
    "published_date": 1727787600,
    "readme": "# Splash Protocol\n\nA comprehensive demonstration protocol that showcases advanced TX3 language features through the implementation of a decentralized exchange (DEX) with liquidity pool management. This protocol serves as both a functional DEX and an educational resource for advanced TX3 programming patterns.\n\n## Features\n\n- **Advanced DEX Functionality**: Complete automated market maker (AMM) implementation\n- **Liquidity Pool Management**: Create, manage, and interact with liquidity pools\n- **Multi-Asset Support**: Handle diverse asset classes and trading pairs\n- **Swap Operations**: Sophisticated token swapping with slippage protection\n- **Deposit/Withdrawal**: Liquidity provision and removal mechanisms\n- **Fee Management**: Configurable trading fees and reward distribution\n\n## Core Components\n\n### Pool Architecture\n- **PoolValidator**: Script validator for pool operations and security\n- **Pool NFT**: Unique identifier for each liquidity pool\n- **Asset Pairs**: Trading pairs with configurable ratios\n- **Liquidity Tokens**: Represent ownership share in pool\n\n### Transaction Types\n- **Swap Transactions**: Exchange one asset for another through pool\n- **Deposit Transactions**: Add liquidity to earn trading fees\n- **Withdrawal Transactions**: Remove liquidity and claim rewards\n\n## Data Structures\n\n### PoolDatum\nCore pool state containing:\n- **pool_nft**: Unique pool identifier (AssetClass)\n- **asset_x/asset_y**: Trading pair assets\n- **asset_lq**: Liquidity token representation\n- **fee**: Trading fee percentage\n- **stake_admin_policy**: Governance token policies\n- **lq_bound**: Liquidity constraints\n\n### SwapDatum\nSwap operation parameters:\n- **base/quote**: Asset pair for trading\n- **pool_nft**: Target pool identifier\n- **fee**: Trading fee structure\n- **ex_fee_per_token**: Exchange rate calculations\n- **reward_pkh**: Reward recipient address\n- **base_amount**: Input asset quantity\n- **min_quote_amount**: Slippage protection\n\n### DepositDatum\nLiquidity deposit specifications:\n- **pool_nft**: Target pool for liquidity addition\n- **asset_x/asset_y/asset_lq**: Pool asset configuration\n- **fee**: Pool trading fee\n- **reward_pkh**: Liquidity provider address\n\n## Advanced Language Features\n\n### Type System Showcase\n- **AssetClass**: Standard asset representation pattern\n- **OutputReference**: Blockchain reference handling\n- **Optional Types**: Safe null handling with Option<T>\n- **Array Types**: Dynamic asset policy arrays\n\n### Validation Patterns\n- **Script References**: Efficient validator script management\n- **Policy Integration**: Complex asset policy validation\n- **Multi-input Validation**: Coordinate multiple UTxO inputs\n\n### Mathematical Operations\n- **Fee Calculations**: Percentage-based fee computation\n- **Exchange Rates**: Dynamic pricing based on pool ratios\n- **Slippage Protection**: Minimum output guarantees\n- **Liquidity Math**: Pool share calculations\n\n## Protocol Operations\n\n### Swap Process\n1. **Route Discovery**: Find optimal pool for asset pair\n2. **Price Calculation**: Determine exchange rate and fees\n3. **Slippage Check**: Verify minimum output requirements\n4. **Asset Exchange**: Execute swap through pool\n5. **Fee Distribution**: Allocate trading fees to pool\n\n### Liquidity Management\n1. **Pool Creation**: Initialize new trading pools\n2. **Liquidity Addition**: Deposit assets to earn fees\n3. **Share Calculation**: Determine liquidity token allocation\n4. **Reward Tracking**: Monitor accumulated trading fees\n5. **Withdrawal**: Remove liquidity and claim rewards\n\n## Technical Innovations\n\n### AMM Implementation\n- **Constant Product Formula**: x * y = k automated market making\n- **Dynamic Pricing**: Price discovery through trading activity\n- **Arbitrage Resistance**: Built-in mechanisms to prevent exploitation\n\n### Governance Integration\n- **Stake Admin Policies**: Governance token integration\n- **Parameter Updates**: Dynamic fee and configuration changes\n- **Protocol Upgrades**: Versioned validator system\n\n### Security Features\n- **Validator Scripts**: Comprehensive transaction validation\n- **Access Control**: Role-based operation permissions\n- **Slippage Protection**: User-defined minimum outputs\n- **Pool Integrity**: Asset conservation verification\n\n## Use Cases\n\n### DeFi Applications\n- **Token Trading**: Decentralized asset exchange\n- **Yield Farming**: Earn fees through liquidity provision\n- **Price Discovery**: Market-driven asset valuation\n- **Arbitrage**: Cross-pool arbitrage opportunities\n\n### Educational Applications\n- **AMM Mechanics**: Learn automated market maker principles\n- **Protocol Design**: Study complex multi-party protocols\n- **TX3 Mastery**: Advanced language feature usage\n- **DeFi Architecture**: Understand decentralized exchange design\n\n## Protocol Benefits\n\n### For Traders\n- **Permissionless Trading**: No KYC or account requirements\n- **24/7 Availability**: Continuous trading without downtime\n- **Fair Pricing**: Market-driven price discovery\n- **Low Slippage**: Deep liquidity pools for efficient trading\n\n### For Liquidity Providers\n- **Passive Income**: Earn fees from trading activity\n- **Composable Yield**: Integrate with other DeFi protocols\n- **Transparent Returns**: Clear fee distribution mechanisms\n- **Flexible Participation**: Add/remove liquidity anytime\n\n## Technical Excellence\n\n- **Gas Efficiency**: Optimized for minimal transaction costs\n- **Scalability**: Handle high-volume trading efficiently\n- **Composability**: Integration with other DeFi protocols\n- **Upgradeability**: Built-in mechanisms for protocol evolution\n\nThis protocol demonstrates the full power of TX3 for building sophisticated DeFi applications, serving as both a production-ready DEX implementation and a comprehensive educational resource for advanced TX3 programming techniques."
  },{
    "name": "swap_static",
    "scope": "example",
    "description": "Static token swap protocol with fixed parameters for educational purposes",
    "protocol_path": "swap_static.tx3",
    "published_date": 1727787600,
    "readme": "# Static Swap Protocol\n\nA simplified, educational token swap protocol with fixed parameters and predefined assets, designed to demonstrate core DEX mechanics without the complexity of dynamic pricing or variable parameters. This protocol serves as an excellent introduction to automated market maker concepts.\n\n## Features\n\n- **Fixed Asset Pairs**: Predefined assets A and B for simplified trading\n- **Static Pool State**: Fixed pool ratios for predictable behavior\n- **Simple Swap Logic**: Basic token exchange without complex calculations\n- **Educational Design**: Clear, understandable code for learning purposes\n- **Minimal Complexity**: Focus on core concepts without advanced features\n\n## Core Components\n\n### Predefined Assets\n- **Asset A**: Fixed asset with policy `0xabc123` and name `A`\n- **Asset B**: Fixed asset with policy `0xabc123` and name `B`\n- **Trading Pair**: A/B pair with static exchange ratios\n\n### Pool Management\n- **PoolState**: Simple state tracking pair_a and pair_b quantities\n- **Dex Party**: Pool operator managing liquidity and swaps\n- **Static Ratios**: Fixed exchange rates for predictable trading\n\n## Protocol Structure\n\n### Data Types\n\n#### PoolState\n```\nPoolState {\n  pair_a: Int,  // Quantity of Asset A in pool\n  pair_b: Int,  // Quantity of Asset B in pool\n}\n```\n\n#### SwapParams\n```\nSwapParams {\n  amount: Int,  // Amount to swap\n  ratio: Int,   // Exchange ratio\n}\n```\n\n### Transaction Flow\n\n#### Swap Transaction\n1. **Pool Input**: Consume pool UTxO with current state\n2. **Payment Input**: Buyer provides Asset B for swap\n3. **Pool Update**: Adjust pool balances (less A, more B)\n4. **Asset Exchange**: Buyer receives Asset A\n5. **Change Return**: Return remaining balance to buyer\n\n## Swap Mechanics\n\n### Simple Exchange Process\n1. **Input Validation**: Verify buyer has sufficient Asset B\n2. **Ratio Calculation**: Apply fixed exchange ratio\n3. **Pool Balance Update**: Decrease pair_a, increase pair_b\n4. **Asset Transfer**: Send Asset A to buyer\n5. **Fee Deduction**: Handle transaction fees\n\n### Pool State Management\n- **Balance Tracking**: Monitor asset quantities in pool\n- **State Persistence**: Maintain pool state across transactions\n- **Conservation**: Ensure total value conservation in swaps\n\n## Educational Value\n\n### Core Concepts Demonstrated\n- **UTxO Model**: How DEX state is managed in UTxO systems\n- **Asset Exchange**: Basic principles of token swapping\n- **Pool Mechanics**: Simplified liquidity pool operations\n- **Transaction Structure**: Input/output patterns for swaps\n\n### Learning Progression\n1. **Asset Definition**: Understanding fixed asset declarations\n2. **State Management**: Pool state tracking and updates\n3. **Transaction Logic**: Swap execution and validation\n4. **Fee Handling**: Basic fee calculation and deduction\n\n## Simplified Features\n\n### What's Simplified\n- **Fixed Assets**: No dynamic asset support\n- **Static Ratios**: No dynamic pricing based on liquidity\n- **No Slippage**: Predictable exchange rates\n- **Single Pair**: Only A/B trading pair supported\n- **Basic Fees**: Simple fee structure\n\n### Benefits of Simplification\n- **Easy Understanding**: Clear logic flow without complexity\n- **Predictable Behavior**: Fixed ratios for consistent results\n- **Learning Focus**: Concentrate on core concepts\n- **Debugging Friendly**: Simple structure for troubleshooting\n\n## Parameters\n\n- `ask`: Int - Amount of Asset A the buyer wants to receive\n- `bid`: Int - Amount of Asset B the buyer is willing to pay\n\n## Use Cases\n\n### Educational Applications\n- **TX3 Learning**: Introduction to DEX protocol development\n- **DEX Concepts**: Understanding automated market maker basics\n- **UTxO Patterns**: Learn UTxO-based state management\n- **Protocol Testing**: Simple environment for testing concepts\n\n### Development Applications\n- **Prototype Development**: Foundation for more complex DEX protocols\n- **Testing Framework**: Simple swap logic for integration testing\n- **Reference Implementation**: Template for basic swap functionality\n- **Demo Applications**: Showcase basic DEX capabilities\n\n## Technical Implementation\n\n### Pool Operations\n- **State Tracking**: Simple integer-based balance management\n- **Atomic Swaps**: Single transaction swap execution\n- **Balance Updates**: Direct manipulation of pool quantities\n- **Validation**: Basic input/output validation\n\n### Asset Management\n- **Fixed Policies**: Predefined asset policy identifiers\n- **Static Names**: Hard-coded asset names for simplicity\n- **Simple Arithmetic**: Basic addition/subtraction for balances\n- **Fee Calculation**: Standard transaction fee handling\n\n## Comparison with Advanced DEX\n\n| Feature | Static Swap | Advanced DEX |\n|---------|-------------|---------------|\n| Assets | Fixed A/B | Dynamic any assets |\n| Pricing | Static ratios | Dynamic AMM pricing |\n| Liquidity | Fixed pool | Variable liquidity |\n| Slippage | None | Slippage protection |\n| Fees | Basic | Complex fee structures |\n| Complexity | Low | High |\n\n## Next Steps\n\nAfter mastering this protocol, developers can progress to:\n- **Dynamic Asset Support**: Handle any asset pairs\n- **AMM Pricing**: Implement constant product formulas\n- **Liquidity Management**: Add/remove liquidity functionality\n- **Advanced Features**: Slippage protection, fee optimization\n\nThis protocol provides a solid foundation for understanding DEX mechanics and serves as a stepping stone to more sophisticated trading protocols in the TX3 ecosystem."
  },{
    "name": "transfer_nft",
    "scope": "example",
    "description": "Specialized protocol for transferring NFTs while maintaining ownership integrity",
    "protocol_path": "transfer_nft.tx3",
    "published_date": 1727787600,
    "readme": "# NFT Transfer Protocol\n\nA specialized protocol designed for secure and efficient transfer of non-fungible tokens (NFTs) between parties while maintaining proper ownership integrity, metadata preservation, and minimum UTxO requirements. This protocol demonstrates best practices for NFT handling in the TX3 ecosystem.\n\n## Features\n\n- **Secure NFT Transfer**: Safe transfer of unique digital assets between parties\n- **Ownership Integrity**: Maintains clear ownership chain and provenance\n- **Metadata Preservation**: Protects NFT metadata during transfer process\n- **Minimum UTxO Handling**: Automatically manages required ADA for NFT UTxOs\n- **Fee Management**: Efficient handling of transaction fees\n- **Change Optimization**: Returns excess funds to sender\n\n## Core Components\n\n### Transfer Parties\n- **Sender**: Current NFT owner initiating the transfer\n- **Receiver**: Intended recipient of the NFT\n\n### UTxO Management\n- **Gas Source**: Sender's UTxO providing transaction fees and minimum UTxO value\n- **Token Source**: UTxO containing the NFT to be transferred\n- **Token Target**: New UTxO at receiver's address containing the NFT\n- **Change Target**: Return unused funds to sender\n\n## Protocol Mechanics\n\n### Transfer Process\n1. **Preparation**: Sender specifies NFT and receiver address\n2. **UTxO Selection**: Identify NFT UTxO and gas funding UTxO\n3. **Fee Calculation**: Calculate transaction fees and minimum UTxO requirements\n4. **Transfer Execution**: Move NFT to receiver's address\n5. **Change Return**: Return excess funds to sender\n\n### Minimum UTxO Requirements\n- **NFT UTxO**: Each NFT UTxO must contain minimum ADA for protocol compliance\n- **Automatic Calculation**: Protocol calculates required ADA using `minutxo()` function\n- **Fee Allocation**: Ensure sufficient ADA for both fees and minimum UTxO\n\n## Transaction Structure\n\n### Inputs\n1. **gas_source**: Sender's UTxO with sufficient ADA for fees and minimum UTxO\n2. **token_source**: Sender's UTxO containing the NFT to transfer\n\n### Outputs\n1. **token_target**: Receiver's new UTxO with NFT + minimum ADA\n2. **change_target**: Sender's change UTxO with remaining funds\n\n### Validation Logic\n- **Asset Conservation**: Ensure NFT is properly transferred without duplication\n- **ADA Conservation**: Verify all ADA is properly accounted for\n- **Minimum UTxO**: Validate receiver's UTxO meets minimum ADA requirements\n\n## Parameters\n\n- `token`: Asset - The specific NFT to transfer (policy ID + asset name + quantity)\n\n## Advanced Features\n\n### Smart UTxO Management\n- **Dynamic MinUTxO**: Automatic calculation of minimum ADA requirements\n- **Efficient Fee Handling**: Optimal fee calculation and distribution\n- **Multi-Input Support**: Handle NFT and gas from separate UTxOs\n- **Change Optimization**: Minimize dust and unnecessary UTxOs\n\n### Asset Validation\n- **NFT Verification**: Ensure transferred asset is actually an NFT (quantity = 1)\n- **Policy Validation**: Verify asset policy and authenticity\n- **Metadata Integrity**: Preserve associated metadata during transfer\n\n## Use Cases\n\n### Individual Transfers\n- **Collectors**: Transfer NFTs between personal wallets\n- **Gifts**: Send NFTs as presents to friends/family\n- **Trades**: Direct peer-to-peer NFT exchanges\n- **Inheritance**: Transfer NFTs to beneficiaries\n\n### Marketplace Integration\n- **Sale Completion**: Final transfer after purchase agreement\n- **Auction Settlement**: Transfer NFT to winning bidder\n- **Escrow Release**: Complete escrowed NFT transactions\n- **Platform Transfers**: Move NFTs between marketplace platforms\n\n### Institutional Use\n- **Portfolio Management**: Reorganize institutional NFT holdings\n- **Custody Services**: Professional NFT custody and management\n- **Loan Collateral**: Transfer NFTs for collateralized loans\n- **Insurance Claims**: Transfer NFTs as part of claims processing\n\n## Security Features\n\n### Transfer Security\n- **Atomic Operations**: Transfer completes entirely or fails entirely\n- **Ownership Verification**: Validate sender actually owns the NFT\n- **Double-Spend Prevention**: UTxO model prevents NFT duplication\n- **Address Validation**: Ensure receiver address is valid\n\n### Economic Security\n- **Fee Protection**: Prevent excessive fee exploitation\n- **Minimum UTxO Compliance**: Ensure all outputs meet protocol requirements\n- **Change Protection**: Secure return of excess funds to sender\n\n## Technical Implementation\n\n### UTxO Optimization\n- **Input Selection**: Efficient selection of funding and token UTxOs\n- **Output Construction**: Optimal UTxO creation for receiver\n- **Fee Calculation**: Precise transaction fee computation\n- **Change Management**: Minimize UTxO fragmentation\n\n### Protocol Integration\n- **Wallet Compatibility**: Works with standard Cardano wallets\n- **dApp Integration**: Easy integration with NFT applications\n- **Marketplace Support**: Foundation for marketplace implementations\n- **Automation Ready**: Suitable for automated transfer systems\n\n## Educational Value\n\n### Learning Objectives\n- **NFT Mechanics**: Understand NFT representation and handling in UTxO model\n- **UTxO Management**: Learn proper UTxO selection and construction\n- **Fee Economics**: Master transaction fee calculation and management\n- **Protocol Design**: Study clean, secure protocol architecture\n\n### Best Practices Demonstrated\n- **Minimum UTxO Handling**: Proper management of Cardano's minimum UTxO requirements\n- **Multi-Input Patterns**: Efficient use of multiple input UTxOs\n- **Change Optimization**: Best practices for handling excess funds\n- **Asset Validation**: Secure NFT verification and transfer patterns\n\nThis protocol serves as both a practical tool for NFT transfers and an educational resource for understanding NFT mechanics, UTxO management, and secure protocol design in the TX3 ecosystem."
  }]
}